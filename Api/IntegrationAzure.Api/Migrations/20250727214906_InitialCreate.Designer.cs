// <auto-generated />
using System;
using IntegrationAzure.Api.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace IntegrationAzure.Api.Migrations
{
    [DbContext(typeof(IntegrationAzureDbContext))]
    [Migration("20250727214906_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("IntegrationAzure.Api.Domain.Entities.Attachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid?>("FailureId")
                        .HasColumnType("uuid");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("IssueId")
                        .HasColumnType("uuid");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("UserStoryId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FailureId");

                    b.HasIndex("IssueId");

                    b.HasIndex("UserStoryId");

                    b.ToTable("attachments", (string)null);
                });

            modelBuilder.Entity("IntegrationAzure.Api.Domain.Entities.Failure", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AssignedTo")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<TimeSpan?>("DowntimeDuration")
                        .HasColumnType("interval");

                    b.Property<string>("Environment")
                        .HasColumnType("text");

                    b.Property<decimal?>("EstimatedImpactCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("FailureNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ImpactDescription")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("IssueId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("OccurredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PermanentSolution")
                        .HasColumnType("text");

                    b.Property<string>("ReportedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("ResolvedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RootCauseAnalysis")
                        .HasColumnType("text");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StepsToReproduce")
                        .HasColumnType("text");

                    b.Property<string>("SystemsAffected")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("UserStoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("WorkaroundSolution")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AssignedTo");

                    b.HasIndex("FailureNumber");

                    b.HasIndex("IssueId");

                    b.HasIndex("OccurredAt");

                    b.HasIndex("Severity");

                    b.HasIndex("Status");

                    b.HasIndex("UserStoryId");

                    b.ToTable("failures", (string)null);
                });

            modelBuilder.Entity("IntegrationAzure.Api.Domain.Entities.Issue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ActualResult")
                        .HasColumnType("text");

                    b.Property<string>("AssignedTo")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Environment")
                        .HasColumnType("text");

                    b.Property<string>("ExpectedResult")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("IssueNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Reporter")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Resolution")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ResolvedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StepsToReproduce")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("UserStoryId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AssignedTo");

                    b.HasIndex("IssueNumber");

                    b.HasIndex("Priority");

                    b.HasIndex("Status");

                    b.HasIndex("Type");

                    b.HasIndex("UserStoryId");

                    b.ToTable("issues", (string)null);
                });

            modelBuilder.Entity("IntegrationAzure.Api.Domain.Entities.TestCase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("integer");

                    b.Property<string>("Result")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("UserStoryId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Status");

                    b.HasIndex("UserStoryId");

                    b.ToTable("test_cases", (string)null);
                });

            modelBuilder.Entity("IntegrationAzure.Api.Domain.Entities.UserStory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AcceptanceCriteria")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("DemandNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("DemandNumber");

                    b.HasIndex("Priority");

                    b.HasIndex("Status");

                    b.ToTable("user_stories", (string)null);
                });

            modelBuilder.Entity("IntegrationAzure.Api.Domain.Entities.Attachment", b =>
                {
                    b.HasOne("IntegrationAzure.Api.Domain.Entities.Failure", "Failure")
                        .WithMany("Attachments")
                        .HasForeignKey("FailureId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IntegrationAzure.Api.Domain.Entities.Issue", "Issue")
                        .WithMany("Attachments")
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IntegrationAzure.Api.Domain.Entities.UserStory", "UserStory")
                        .WithMany("Attachments")
                        .HasForeignKey("UserStoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Failure");

                    b.Navigation("Issue");

                    b.Navigation("UserStory");
                });

            modelBuilder.Entity("IntegrationAzure.Api.Domain.Entities.Failure", b =>
                {
                    b.HasOne("IntegrationAzure.Api.Domain.Entities.Issue", "Issue")
                        .WithMany()
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("IntegrationAzure.Api.Domain.Entities.UserStory", "UserStory")
                        .WithMany()
                        .HasForeignKey("UserStoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Issue");

                    b.Navigation("UserStory");
                });

            modelBuilder.Entity("IntegrationAzure.Api.Domain.Entities.Issue", b =>
                {
                    b.HasOne("IntegrationAzure.Api.Domain.Entities.UserStory", "UserStory")
                        .WithMany()
                        .HasForeignKey("UserStoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("UserStory");
                });

            modelBuilder.Entity("IntegrationAzure.Api.Domain.Entities.TestCase", b =>
                {
                    b.HasOne("IntegrationAzure.Api.Domain.Entities.UserStory", "UserStory")
                        .WithMany("TestCases")
                        .HasForeignKey("UserStoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserStory");
                });

            modelBuilder.Entity("IntegrationAzure.Api.Domain.Entities.Failure", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("IntegrationAzure.Api.Domain.Entities.Issue", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("IntegrationAzure.Api.Domain.Entities.UserStory", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("TestCases");
                });
#pragma warning restore 612, 618
        }
    }
}
